/*  ======================================================================== *

                                    주 의 사 항


    1. AES.c를 먼저 구현한 다음, 해당 파일을 구현함
    2. 사전에 주어진 메뉴얼 속 수도코드를 참고하여 구현함
    3. 구현은 다양한 방식으로 이뤄질 수 있음
    4. AES.h에 정의된 AES128(...) 함수만을 이용해서 구현해야 함
    5. XTS_AES128(...) 함수의 호출과 리턴이 여러번 반복되더라도 메모리 누수가 생기지 않게 함

 *  ======================================================================== */

#include <stdio.h>
#include <stdlib.h>
#include "XTS_AES.h"

// 암호화 모드
ENC = 1 
// 복호화 모드
DEC = 0 

'''// 128비트 XTS_AES 암복호화 인터페이스
void XTS_AES128(BYTE *plain, BYTE *cipher, unsigned int size, int mode);
/* 필요한 전역 변수 및 함수 추가 선언 */'''



'''/*  <128비트 XTS_AES 암복호화 함수>
 *  
 *  mode가 ENC일 경우 평문을 암호화하고, DEC일 경우 암호문을 복호화하는 함수
 *
 *  [ENC 모드]
 *  plain   평문 바이트 배열
 *  cipher  결과(암호문)이 담길 바이트 배열. 호출하는 사용자가 사전에 메모리를 할당하여 파라미터로 넘김
 *  size    평문 크기 (바이트 단위)
 *  key     256비트 암호키 (32바이트). 상위 16바이트는 key1, 하위 16바이트는 key2
 *
 *  [DEC 모드]
 *  plain   결과(평문)가 담길 바이트 배열. 호출하는 사용자가 사전에 메모리를 할당하여 파라미터로 넘김
 *  cipher  암호문 바이트 배열
 *  size    암호문 크기 (바이트 단위)
 *  key     256비트 암호키 (32바이트). 상위 16바이트는 key1, 하위 16바이트는 key2
 */'''
def XTS_AES128(*plain, *cipher, size, mode){

	/* 추가 구현 */

}
